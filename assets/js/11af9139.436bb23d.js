"use strict";(self.webpackChunkcresp_docs=self.webpackChunkcresp_docs||[]).push([[810],{5411:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"python-projects","title":"CRESP for Python Projects","description":"This document explains how to use the CRESP protocol with Python projects, leveraging the compatibility with pyproject.toml.","source":"@site/docs/python-projects.md","sourceDirName":".","slug":"/python-projects","permalink":"/docs/python-projects","draft":false,"unlisted":false,"editUrl":"https://github.com/wisupai/CRESP-DOCS/tree/main/docs/python-projects.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"CRESP Protocol Format","permalink":"/docs/cresp-format"},"next":{"title":"CRESP for R Projects","permalink":"/docs/r-projects"}}');var r=o(4848),i=o(8453);const s={sidebar_position:3},c="CRESP for Python Projects",a={},l=[{value:"Integration with pyproject.toml",id:"integration-with-pyprojecttoml",level:2},{value:"Example Configuration",id:"example-configuration",level:2},{value:"Environment Management",id:"environment-management",level:2},{value:"Using Poetry",id:"using-poetry",level:3},{value:"Using pip",id:"using-pip",level:3},{value:"Using Conda",id:"using-conda",level:3},{value:"Execution Configuration",id:"execution-configuration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example Project Structure",id:"example-project-structure",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cresp-for-python-projects",children:"CRESP for Python Projects"})}),"\n",(0,r.jsxs)(n.p,{children:["This document explains how to use the CRESP protocol with Python projects, leveraging the compatibility with ",(0,r.jsx)(n.code,{children:"pyproject.toml"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-pyprojecttoml",children:"Integration with pyproject.toml"}),"\n",(0,r.jsxs)(n.p,{children:["The CRESP protocol is designed to work seamlessly with Python projects by extending the standard ",(0,r.jsx)(n.code,{children:"pyproject.toml"})," format. You can either:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Reference an existing ",(0,r.jsx)(n.code,{children:"pyproject.toml"})," file in your CRESP configuration"]}),"\n",(0,r.jsx)(n.li,{children:"Include the Python project configuration directly within your CRESP file"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of how to configure a Python project in your CRESP file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'###############################################################################\n# Python Project Configuration\n###############################################################################\n\n[pyproject]\nfile = "pyproject.toml"  # Optional: Points to an existing pyproject.toml file\n\n# If no external pyproject.toml is referenced, you can include the configuration directly:\n[pyproject.build-system]\nrequires = ["setuptools>=42", "wheel"]\nbuild-backend = "setuptools.build_meta"\n\n[pyproject.tool.poetry]\nname = "my-research-project"\nversion = "0.1.0"\ndescription = "A reproducible research project using Python"\nauthors = ["Researcher Name <researcher@example.com>"]\nreadme = "README.md"\npackages = [{include = "my_package"}]\n\n[pyproject.tool.poetry.dependencies]\npython = "^3.8"\nnumpy = "^1.22.0"\npandas = "^1.4.0"\nscikit-learn = "^1.0.2"\nmatplotlib = "^3.5.1"\ntorch = "^1.10.0"\n\n[pyproject.tool.poetry.group.dev.dependencies]\npytest = "^7.0.0"\nblack = "^22.1.0"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"environment-management",children:"Environment Management"}),"\n",(0,r.jsx)(n.p,{children:"For Python projects, CRESP supports multiple environment management approaches:"}),"\n",(0,r.jsx)(n.h3,{id:"using-poetry",children:"Using Poetry"}),"\n",(0,r.jsxs)(n.p,{children:["If you're using Poetry for dependency management, the CRESP configuration can directly use the Poetry sections from ",(0,r.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[pyproject.tool.poetry]\n# Poetry configuration as shown above\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-pip",children:"Using pip"}),"\n",(0,r.jsx)(n.p,{children:"For pip-based projects, you can specify dependencies in the software packages section:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[[software.packages]]\nname = "numpy"\nversion = "1.22.0"\nsource = "pip"\n\n[[software.packages]]\nname = "pandas"\nversion = "1.4.0"\nsource = "pip"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-conda",children:"Using Conda"}),"\n",(0,r.jsx)(n.p,{children:"For Conda-based environments, you can specify the environment file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[software.conda]\nenvironment_file = "environment.yml"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"execution-configuration",children:"Execution Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Specify how to run your Python project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[execution]\nverify_script = "verify_env.py"  # Script to verify the environment\ncommand = "python main.py --config config.json"  # Command to run the experiment\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Pinning"}),": Always pin exact versions of dependencies to ensure reproducibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hash Verification"}),": Include hashes for critical packages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Isolation"}),": Use virtual environments (Poetry, venv, conda)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Random Seed Control"}),": Set global and local random seeds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Include detailed documentation on how to run the experiment"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-project-structure",children:"Example Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"A typical Python project using CRESP might have the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"my-research-project/\n\u251c\u2500\u2500 cresp.toml              # CRESP configuration file\n\u251c\u2500\u2500 pyproject.toml          # Python project configuration\n\u251c\u2500\u2500 README.md               # Project documentation\n\u251c\u2500\u2500 data/                   # Data directory\n\u2502   \u251c\u2500\u2500 raw/                # Raw data\n\u2502   \u2514\u2500\u2500 processed/          # Processed data\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 data_processing.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2514\u2500\u2500 visualization.py\n\u251c\u2500\u2500 notebooks/              # Jupyter notebooks\n\u2502   \u2514\u2500\u2500 analysis.ipynb\n\u251c\u2500\u2500 tests/                  # Tests\n\u2502   \u2514\u2500\u2500 test_models.py\n\u251c\u2500\u2500 verify_env.py           # Environment verification script\n\u2514\u2500\u2500 main.py                 # Main experiment script\n"})}),"\n",(0,r.jsx)(n.p,{children:"By following these guidelines, you can ensure that your Python-based computational research is fully reproducible using the CRESP protocol."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);