"use strict";(self.webpackChunkcresp_docs=self.webpackChunkcresp_docs||[]).push([[9346],{3255:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cresp-format","title":"CRESP Protocol Format","description":"The Computational Research Environment Standardization Protocol (CRESP) is designed to ensure reproducibility of computational experiments across different research domains. This document outlines the format and structure of the CRESP protocol configuration file.","source":"@site/docs/cresp-format.md","sourceDirName":".","slug":"/cresp-format","permalink":"/docs/cresp-format","draft":false,"unlisted":false,"editUrl":"https://github.com/wisupai/CRESP-DOCS/tree/main/docs/cresp-format.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Why CRESP?","permalink":"/docs/why-cresp"},"next":{"title":"Tutorial - Basics","permalink":"/docs/category/tutorial---basics"}}');var t=o(4848),r=o(8453);const a={sidebar_position:2},s="CRESP Protocol Format",c={},l=[{value:"CRESP Configuration Example",id:"cresp-configuration-example",level:2},{value:"Format Explanation",id:"format-explanation",level:2},{value:"Compatibility",id:"compatibility",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"cresp-protocol-format",children:"CRESP Protocol Format"})}),"\n",(0,t.jsx)(e.p,{children:"The Computational Research Environment Standardization Protocol (CRESP) is designed to ensure reproducibility of computational experiments across different research domains. This document outlines the format and structure of the CRESP protocol configuration file."}),"\n",(0,t.jsx)(e.h2,{id:"cresp-configuration-example",children:"CRESP Configuration Example"}),"\n",(0,t.jsx)(e.p,{children:"Below is a comprehensive example of a CRESP configuration file in TOML format:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-toml",children:'###############################################################################\n# CRESP Protocol Configuration\n###############################################################################\n\n# Protocol version and basic information\ncresp_version = "1.0"          # CRESP protocol version\nauthor = "John Smith"\nemail = "john.smith@example.com"\ndate = "2025-03-09"            # Configuration file creation date\n\n###############################################################################\n# Experiment Basic Information\n###############################################################################\n\nexperiment_name = "Image Classification Model Training Experiment"\ndescription = "Training and evaluation of a custom convolutional neural network for image classification on the MNIST dataset."\n\n###############################################################################\n# Hardware Configuration\n###############################################################################\n\n[hardware]\nCPU = "Intel Xeon Silver 4114, 2.2GHz, 10 cores"    # Minimum hardware requirements\nGPU = "NVIDIA Tesla V100, 16GB x1"\nRAM = "64GB"\n\n###############################################################################\n# Software Environment Configuration\n###############################################################################\n\n[software]\nos = "Ubuntu 20.04.5 LTS"    # Operating system version\n\n[[software.packages]]\nname = "Python"\nversion = "3.8.13"\nsource = "pip"\nhash = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"\n\n[[software.packages]]\nname = "PyTorch"\nversion = "1.10.2"\nsource = "pip"\nhash = "3f786850e387550fdab836ed7e6dc881de23001b2c81f"\n\n###############################################################################\n# Python Project Configuration (compatible with pyproject.toml)\n###############################################################################\n\n[pyproject]\nfile = "pyproject.toml"  # Points to an existing pyproject.toml file in the project\n\n[pyproject.build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n[pyproject.tool.poetry]\nname = "vision-classifier"\nversion = "0.1.0"\ndescription = "A CNN-based image classifier for MNIST dataset."\nauthors = ["John Smith <john.smith@example.com>"]\n\n[pyproject.tool.poetry.dependencies]\npython = "^3.8"\ntorch = "^1.10.2"\n# ...other dependencies\n\n###############################################################################\n# R Project Configuration (rproject)\n###############################################################################\n\n[rproject]\n# Points to the R project configuration file, such as DESCRIPTION\nfile = "DESCRIPTION"\nname = "r-vision-classifier"\nversion = "1.0.0"\ndescription = "CNN-based MNIST image classification project implemented in R."\nauthors = ["John Smith <john.smith@example.com>"]\n\n###############################################################################\n# MATLAB Project Configuration (matproject)\n###############################################################################\n\n[matproject]\n# Points to the MATLAB project configuration file, format can be self-defined, such as JSON or other structures\nfile = "matproject.json"\nname = "mat-vision-classifier"\nversion = "1.0"\ndescription = "MATLAB-based image classification project using custom CNN on MNIST dataset."\nauthors = ["John Smith <john.smith@example.com>"]\n\n###############################################################################\n# Global Random Seed Setting\n###############################################################################\n\nrandom_seed = 12345\n\n###############################################################################\n# Dataset Configuration\n###############################################################################\n\n[[data]]\nname = "Training Set (MNIST)"\nsource = "https://storage.googleapis.com/cresp-examples/mnist_train.csv"\nsha256 = "3f786850e387550fdab836ed7e6dc881de23001b2c81f0a1b2c3d4e5f67890ab"\n\n###############################################################################\n# Experiment Execution Configuration\n###############################################################################\n\n[execution]\nverify_script = "verify_env.py"   # Environment verification script\ncommand = "python train_model.py --epochs 5 --output model.pth"  # Command to start the experiment\n\n###############################################################################\n# Version and Repository Information\n###############################################################################\n\n[version]\nrepo = "https://github.com/example-research/vision-classifier.git"\ncommit = "9f2d3c4b5a6e7f8910da1b2c3d4e5f67890abcde"\n\n###############################################################################\n# Virtualization and Deployment Configuration\n###############################################################################\n\n[virtualization]\nvm_image = "ubuntu-20.04-lts.img"     # Virtual machine image file\nstartup_script = "init_experiment.sh"  # Initialization script to execute after VM startup\n\n[virtualization.resources]\ncpu = "8"                   # Allocated CPU count\nmemory = "32GB"             # Allocated memory size\nstorage = "200GB"           # Allocated storage space\n\n[virtualization.resources.gpu]\nmodel = "NVIDIA Tesla V100"\ncount = 1\n\n[virtualization.network]\npublic_ip = true           # Whether to allocate a public IP\nbandwidth = "1Gbps"        # Network bandwidth requirement\n\n[virtualization.auto_scaling]\nenable = true              # Whether to enable auto-scaling\nmax_instances = 5          # Maximum number of VM instances\nscaling_policy = "Load-based auto-scaling"\n\n###############################################################################\n# Project Links (project homepage or repository entry)\n###############################################################################\n\nproject_url = "https://github.com/example-research/vision-classifier"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"format-explanation",children:"Format Explanation"}),"\n",(0,t.jsx)(e.p,{children:"The CRESP protocol uses TOML format to describe computational experiments in a standardized way. The configuration file is divided into several sections:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Basic Information"}),": Protocol version, author details, and creation date"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Experiment Information"}),": Name and description of the experiment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Hardware Configuration"}),": Minimum hardware requirements for reproducing the experiment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Software Environment"}),": OS and package dependencies with specific versions"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Project Configuration"}),": Compatible with various language-specific project formats","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Python projects (pyproject.toml)"}),"\n",(0,t.jsx)(e.li,{children:"R projects (rproject)"}),"\n",(0,t.jsx)(e.li,{children:"MATLAB projects (matproject)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Random Seed"}),": Global random seed for reproducibility"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Dataset Configuration"}),": Sources and verification hashes for datasets"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Execution Configuration"}),": Commands and scripts for running the experiment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Version Control"}),": Repository and commit information"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Virtualization"}),": VM configuration for cloud deployment"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,t.jsx)(e.p,{children:"The CRESP protocol is designed to be compatible with existing project configuration formats:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"For Python projects, it can reference an existing pyproject.toml file"}),"\n",(0,t.jsx)(e.li,{children:"For R projects, it can reference a DESCRIPTION file"}),"\n",(0,t.jsx)(e.li,{children:"For MATLAB projects, it can reference a custom configuration file"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This ensures that researchers can easily adopt the CRESP protocol without significant changes to their existing workflows."})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>a,x:()=>s});var i=o(6540);const t={},r=i.createContext(t);function a(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);